from aiohttp import web
import json
from database import get_user, update_balance, update_inventory, update_bonus_claim
import random
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ–π—Å–æ–≤
CASE_SETTINGS = {
    "gift_box": {
        "price": 25,
        "items": [
            {"gift": "üß∏", "price": 15, "chance": 35},
            {"gift": "üíù", "price": 15, "chance": 35},
            {"gift": "üåπ", "price": 25, "chance": 7.5},
            {"gift": "üéÅ", "price": 25, "chance": 7.5},
            {"gift": "üöÄ", "price": 50, "chance": 5},
            {"gift": "üçæ", "price": 50, "chance": 5},
            {"gift": "üèÜ", "price": 100, "chance": 2.5},
            {"gift": "üíç", "price": 100, "chance": 2.5}
        ]
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
ROULETTE_SETTINGS = {
    "price": 50,
    "items": [
        {"gift": "üß∏", "price": 15, "chance": 34.5},
        {"gift": "üíù", "price": 15, "chance": 34.5},
        {"gift": "üåπ", "price": 25, "chance": 7.5},
        {"gift": "üéÅ", "price": 25, "chance": 7.5},
        {"gift": "üöÄ", "price": 50, "chance": 5},
        {"gift": "üçæ", "price": 50, "chance": 5},
        {"gift": "üèÜ", "price": 100, "chance": 2.5},
        {"gift": "üíç", "price": 100, "chance": 2.5},
        {"gift": "‚ùî", "price": 0, "chance": 1, "name": "Random NFT Gift"}
    ]
}

async def get_user_data(request):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(request.query.get('user_id'))
    user_data = await get_user(user_id)
    
    if user_data:
        return web.json_response({
            'success': True,
            'user': user_data
        })
    else:
        return web.json_response({
            'success': False,
            'error': 'User not found'
        })

async def open_case(request):
    """–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å"""
    data = await request.json()
    user_id = data.get('user_id')
    case_type = data.get('case_type')
    
    user_data = await get_user(user_id)
    if not user_data:
        return web.json_response({'success': False, 'error': 'User not found'})
    
    case = CASE_SETTINGS.get(case_type)
    if not case:
        return web.json_response({'success': False, 'error': 'Invalid case type'})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if user_data['balance'] < case['price']:
        return web.json_response({'success': False, 'error': 'Not enough stars'})
    
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞
    rand = random.random() * 100
    current_chance = 0
    
    for item in case['items']:
        current_chance += item['chance']
        if rand <= current_chance:
            won_item = item.copy()
            break
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    await update_balance(user_id, -case['price'])
    
    new_inventory = user_data['inventory'] + [won_item]
    await update_inventory(user_id, new_inventory)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data['balance'] -= case['price']
    user_data['inventory'] = new_inventory
    
    return web.json_response({
        'success': True,
        'won_item': won_item,
        'new_balance': user_data['balance'],
        'inventory': new_inventory
    })

async def spin_roulette(request):
    """–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É"""
    data = await request.json()
    user_id = data.get('user_id')
    
    user_data = await get_user(user_id)
    if not user_data:
        return web.json_response({'success': False, 'error': 'User not found'})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if user_data['balance'] < ROULETTE_SETTINGS['price']:
        return web.json_response({'success': False, 'error': 'Not enough stars'})
    
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞
    rand = random.random() * 100
    current_chance = 0
    
    for item in ROULETTE_SETTINGS['items']:
        current_chance += item['chance']
        if rand <= current_chance:
            won_item = item.copy()
            break
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    await update_balance(user_id, -ROULETTE_SETTINGS['price'])
    
    new_inventory = user_data['inventory'] + [won_item]
    await update_inventory(user_id, new_inventory)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data['balance'] -= ROULETTE_SETTINGS['price']
    user_data['inventory'] = new_inventory
    
    return web.json_response({
        'success': True,
        'won_item': won_item,
        'new_balance': user_data['balance'],
        'inventory': new_inventory
    })

async def claim_bonus(request):
    """–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –∫–µ–π—Å"""
    data = await request.json()
    user_id = data.get('user_id')
    
    user_data = await get_user(user_id)
    if not user_data:
        return web.json_response({'success': False, 'error': 'User not found'})
    
    current_time = int(time.time())
    last_claim = user_data['last_bonus_claim']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (24 —á–∞—Å–∞)
    if current_time - last_claim < 86400:
        return web.json_response({'success': False, 'error': 'Bonus not available yet'})
    
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ (1-5 –∑–≤–µ–∑–¥)
    bonus_stars = random.randint(1, 5)
    await update_balance(user_id, bonus_stars)
    await update_bonus_claim(user_id, current_time)
    
    user_data['balance'] += bonus_stars
    user_data['last_bonus_claim'] = current_time
    
    return web.json_response({
        'success': True,
        'bonus_stars': bonus_stars,
        'new_balance': user_data['balance'],
        'next_bonus': current_time + 86400
    })

async def sell_item(request):
    """–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    data = await request.json()
    user_id = data.get('user_id')
    item_index = data.get('item_index')
    
    user_data = await get_user(user_id)
    if not user_data:
        return web.json_response({'success': False, 'error': 'User not found'})
    
    if item_index >= len(user_data['inventory']):
        return web.json_response({'success': False, 'error': 'Invalid item index'})
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    item = user_data['inventory'][item_index]
    sell_price = int(item['price'] * 1.2)  # –ü—Ä–æ–¥–∞–∂–∞ –∑–∞ 120% —Ü–µ–Ω—ã
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã
    new_inventory = user_data['inventory'].copy()
    new_inventory.pop(item_index)
    
    await update_balance(user_id, sell_price)
    await update_inventory(user_id, new_inventory)
    
    user_data['balance'] += sell_price
    user_data['inventory'] = new_inventory
    
    return web.json_response({
        'success': True,
        'sold_item': item,
        'sell_price': sell_price,
        'new_balance': user_data['balance'],
        'inventory': new_inventory
    })

def setup_routes(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    app.router.add_get('/api/user', get_user_data)
    app.router.add_post('/api/open_case', open_case)
    app.router.add_post('/api/spin_roulette', spin_roulette)
    app.router.add_post('/api/claim_bonus', claim_bonus)
    app.router.add_post('/api/sell_item', sell_item)